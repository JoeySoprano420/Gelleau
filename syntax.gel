# Define a function
sum(a, b) -> (a + b);

# Conditional logic
if x > 10; {
    print("High");
} else {
    print("Low");
}

# Looping (register-optimized iteration)
while r0 < 100; {
    r0 += 5;
}

# Memory persistence directives
memflag { temp:x, perm:y };

# Hook inline assembly
asm("mov r0, r1");

# Active Comment Execution
*/ TODO: Optimize loop further (log-time complexity) */

# Deferred execution (code flagged as low-priority)
defer {
    calculate_heavy_process();
}

# Omitting unused code
omit {
    legacy_function();
}

# Deleted code (compiler enforces cleanup)
delete {
    old_buggy_code();
}




# Define function
sum(a: int64, b: int64) -> int64 {
    return a + b;
};

# Inline Assembly
asm {
    mov rax, 5;
    add rax, 10;
    ret;
};

# Pipeline Execution
pipeline {
    x = compute(5, 10);
    defer {
        unused_code();
    };
};

